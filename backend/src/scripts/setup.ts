import { validateEnv } from "../config/env.config";
import { connectToDB } from "../config/mongoose";
import { PermissionModel } from "../models/permission.model";
import { Permissions } from "../enums/permissions.enum";
import { RoleModel } from "../models/role.model";
import { UserModel } from "../models/user.model";
import rootRouter from "../routes/index.route";
import { getRoutes } from "./extractRoutes";
import readline from "readline";
import bcrypt from "bcryptjs";
import { disconnect } from "mongoose";

const ADMIN_USERNAME = "admin";
const ADMIN_PASSWORD = "123456";
const ADMIN_NAME = "Admin";

const askQuestion = (query: string): Promise<string> => {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });

    return new Promise((resolve) =>
        rl.question(query, (ans) => {
            rl.close();
            resolve(ans);
        })
    );
};

const main = async () => {
    try {
        validateEnv();
        await connectToDB();

        const answer = await askQuestion(
            "B·∫°n c√≥ mu·ªën x√≥a s·∫°ch d·ªØ li·ªáu hi·ªán c√≥ tr∆∞·ªõc khi thi·∫øt l·∫≠p? (y/n): "
        );

        if (answer.toLowerCase() === "y" || answer.toLowerCase() === "yes") {
            // X√≥a s·∫°ch c√°c collection
            await PermissionModel.deleteMany({});
            await RoleModel.deleteMany({});
            await UserModel.deleteMany({});
            console.log("üóëÔ∏è  ƒê√£ x√≥a s·∫°ch d·ªØ li·ªáu hi·ªán c√≥.");
        } else {
            console.log(
                "‚ö†Ô∏è  Kh√¥ng x√≥a d·ªØ li·ªáu hi·ªán c√≥. Script s·∫Ω ti·∫øp t·ª•c th√™m m·ªõi c√°c m·ª•c c·∫ßn thi·∫øt."
            );
        }

        // Th√™m c√°c Permission v√†o DB
        const permissionsList = Object.values(Permissions);

        let permissionDocs: { [key: string]: any } = {};

        for (const perm of permissionsList) {
            const existingPerm = await PermissionModel.findOne({ name: perm });

            if (!existingPerm) {
                const newPerm = await PermissionModel.create({ name: perm });
                permissionDocs.perm = newPerm;
                console.log(`‚úÖ ƒê√£ th√™m Permission "${perm}"`);
            } else {
                console.log(`‚ö†Ô∏è Permission "${perm}" ƒë√£ t·ªìn t·∫°i`);
                permissionDocs.perm = existingPerm;
            }
        }

        console.log("‚úÖ ƒê√£ th√™m t·∫•t c·∫£ c√°c Permission");

        const adminRole = new RoleModel({
            name: "ADMIN",
            grantAll: true,
        });
        await adminRole.save();
        console.log('‚úÖ ƒê√£ t·∫°o Role "ADMIN" v·ªõi grantAll=true');

        const hashedPassword = await bcrypt.hash(ADMIN_PASSWORD, 10);
        const adminUser = new UserModel({
            username: ADMIN_USERNAME,
            password: hashedPassword,
            name: ADMIN_NAME,
            roles: [adminRole._id],
            status: true,
        });
        await adminUser.save();
        console.log(`‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin: ${ADMIN_USERNAME}`);

        console.log("üéâ Ho√†n th√†nh qu√° tr√¨nh thi·∫øt l·∫≠p");
    } catch (error) {
        console.error("‚ùå L·ªói trong qu√° tr√¨nh thi·∫øt l·∫≠p:", error);
    } finally {
        await disconnect();
        console.log("üîå Ng·∫Øt k·∫øt n·ªëi MongoDB");
    }
};

main();
